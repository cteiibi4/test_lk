{"ast":null,"code":"import axios from \"axios\";\nimport { redirect } from \"react-router-dom\";\nimport { config as conf } from '.settings';\nconst requests = axios.create();\nrequests.interceptors.request.use(async config => {\n  config.headers = {\n    'Authorization': \"Bearer \" + localStorage.getItem('access'),\n    'Accept': 'application/json',\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n  config.baseURL = conf.base_url;\n  return config;\n}, error => {\n  Promise.reject(error);\n});\nrequests.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const access_token = await refreshAccessToken();\n    if (access_token == true) {\n      axios.defaults.headers.common['Authorization'] = localStorage.getItem('access');\n      return requests(originalRequest);\n    } else {\n      return redirect(\"/login\");\n    }\n  }\n  return Promise.reject(error);\n});\nasync function refreshAccessToken() {\n  let answer = false;\n  let url = conf.base_url + \"/api/users/login/token-refresh/\";\n  const data = {\n    refresh: localStorage.getItem('refresh')\n  };\n  const instatnce = axios.create({\n    headers: {\n      'Accept': 'application/json'\n    }\n  });\n  instatnce.post(url, data).then(result => {\n    localStorage.setItem('access', JSON.stringify(result.data.access));\n    localStorage.setItem('refresh', JSON.stringify(result.data.refresh));\n    answer = true;\n  }).catch(error => {\n    localStorage.setItem('access', '');\n    localStorage.setItem('refresh', '');\n  });\n  return answer;\n}\nexport default requests;","map":{"version":3,"names":["axios","redirect","config","conf","requests","create","interceptors","request","use","headers","localStorage","getItem","baseURL","base_url","error","Promise","reject","response","originalRequest","status","_retry","access_token","refreshAccessToken","defaults","common","answer","url","data","refresh","instatnce","post","then","result","setItem","JSON","stringify","access","catch"],"sources":["/app/src/requests.js"],"sourcesContent":["import axios from \"axios\";\nimport { redirect } from \"react-router-dom\";\nimport { config as conf } from '.settings'\n\nconst requests = axios.create();\n\nrequests.interceptors.request.use(\n    async config => {\n      config.headers = { \n        'Authorization': \"Bearer \" + localStorage.getItem('access'),\n        'Accept': 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n      config.baseURL = conf.base_url;\n      return config;\n    },\n    error => {\n      Promise.reject(error)\n  });\n\n  requests.interceptors.response.use((response) => {\n    return response\n  }, async function (error) {\n    const originalRequest = error.config;\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      const access_token = await refreshAccessToken();  \n      if (access_token == true){\n        axios.defaults.headers.common['Authorization'] = localStorage.getItem('access');\n        return requests(originalRequest);\n      } else {\n        return redirect(\"/login\");\n      }\n    }\n    return Promise.reject(error);\n  });\n\n  async function refreshAccessToken() {\n    let answer = false;\n    let url = conf.base_url + \"/api/users/login/token-refresh/\";\n    const data = {\n        refresh: localStorage.getItem('refresh')\n    };\n    const instatnce = axios.create({\n        headers: {\n          'Accept': 'application/json',\n          }\n    });\n\n    instatnce.post(url, data)\n        .then((result) => {\n            localStorage.setItem('access', JSON.stringify(result.data.access));\n            localStorage.setItem('refresh', JSON.stringify(result.data.refresh));\n            answer = true;\n        })\n        .catch((error) => {\n            localStorage.setItem('access', '')\n            localStorage.setItem('refresh', '')\n        })\n    return answer\n  }\n\nexport default requests"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,MAAM,IAAIC,IAAI,QAAQ,WAAW;AAE1C,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAAC,CAAC;AAE/BD,QAAQ,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7B,MAAMN,MAAM,IAAI;EACdA,MAAM,CAACO,OAAO,GAAG;IACf,eAAe,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC3D,QAAQ,EAAE,kBAAkB;IAC5B,cAAc,EAAE;EAClB,CAAC;EACDT,MAAM,CAACU,OAAO,GAAGT,IAAI,CAACU,QAAQ;EAC9B,OAAOX,MAAM;AACf,CAAC,EACDY,KAAK,IAAI;EACPC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AACzB,CAAC,CAAC;AAEFV,QAAQ,CAACE,YAAY,CAACW,QAAQ,CAACT,GAAG,CAAES,QAAQ,IAAK;EAC/C,OAAOA,QAAQ;AACjB,CAAC,EAAE,gBAAgBH,KAAK,EAAE;EACxB,MAAMI,eAAe,GAAGJ,KAAK,CAACZ,MAAM;EACpC,IAAIY,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,MAAMC,YAAY,GAAG,MAAMC,kBAAkB,CAAC,CAAC;IAC/C,IAAID,YAAY,IAAI,IAAI,EAAC;MACvBrB,KAAK,CAACuB,QAAQ,CAACd,OAAO,CAACe,MAAM,CAAC,eAAe,CAAC,GAAGd,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;MAC/E,OAAOP,QAAQ,CAACc,eAAe,CAAC;IAClC,CAAC,MAAM;MACL,OAAOjB,QAAQ,CAAC,QAAQ,CAAC;IAC3B;EACF;EACA,OAAOc,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,eAAeQ,kBAAkBA,CAAA,EAAG;EAClC,IAAIG,MAAM,GAAG,KAAK;EAClB,IAAIC,GAAG,GAAGvB,IAAI,CAACU,QAAQ,GAAG,iCAAiC;EAC3D,MAAMc,IAAI,GAAG;IACTC,OAAO,EAAElB,YAAY,CAACC,OAAO,CAAC,SAAS;EAC3C,CAAC;EACD,MAAMkB,SAAS,GAAG7B,KAAK,CAACK,MAAM,CAAC;IAC3BI,OAAO,EAAE;MACP,QAAQ,EAAE;IACV;EACN,CAAC,CAAC;EAEFoB,SAAS,CAACC,IAAI,CAACJ,GAAG,EAAEC,IAAI,CAAC,CACpBI,IAAI,CAAEC,MAAM,IAAK;IACdtB,YAAY,CAACuB,OAAO,CAAC,QAAQ,EAAEC,IAAI,CAACC,SAAS,CAACH,MAAM,CAACL,IAAI,CAACS,MAAM,CAAC,CAAC;IAClE1B,YAAY,CAACuB,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACH,MAAM,CAACL,IAAI,CAACC,OAAO,CAAC,CAAC;IACpEH,MAAM,GAAG,IAAI;EACjB,CAAC,CAAC,CACDY,KAAK,CAAEvB,KAAK,IAAK;IACdJ,YAAY,CAACuB,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IAClCvB,YAAY,CAACuB,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;EACvC,CAAC,CAAC;EACN,OAAOR,MAAM;AACf;AAEF,eAAerB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}