{"ast":null,"code":"import requests from \"./requests\";\nexport async function getAllSerials({\n  sort,\n  page,\n  sortDirection,\n  filter,\n  filterField\n}) {\n  let data = {\n    page: page,\n    sort: sort,\n    sort_direction: sortDirection\n  };\n  if (filter && filterField) {\n    data = Object.assign(data, {\n      filter: filter,\n      filter_field: filterField\n    });\n  }\n  let result = await requests.get('api/serials/serials/', {\n    params: data\n  });\n  if (result.status === 200) {\n    return result.data;\n  } else {\n    return {\n      error: \"Can't load serials data\"\n    };\n  }\n}\nexport async function getSerial({\n  serial_no\n}) {\n  let data = {\n    'serial_no': serial_no\n  };\n  let result = await requests.get('api/serials/serial/', {\n    params: data\n  });\n  if (result.status === 200) {\n    return result.data;\n  } else {\n    return {\n      error: `Can't load serial: ${serial_no}`\n    };\n  }\n}\nexport async function getShops() {\n  let data = {\n    'page_size': 100000\n  };\n  let result = await requests.get('api/serials/shops', {\n    params: data\n  });\n  if (result.status === 200) {\n    return result.data;\n  } else {\n    return {\n      error: \"Can't load shops data\"\n    };\n  }\n}\nexport async function setSerialShopNo({\n  serial_id,\n  shopId\n}) {\n  let data = {\n    id: serial_id,\n    shop_id: shopId\n  };\n  let result = await requests.post(\"api/serials/serial/\", data);\n  if (result.status === 200) {\n    return result.data;\n  } else {\n    return {\n      error: \"Can't set new shop for KSO\"\n    };\n  }\n}\nexport async function changeSerialNo({\n  serial_id,\n  serial_new\n}) {\n  let data = {\n    id: serial_id,\n    serial: serial_new\n  };\n  let result = await requests.post(\"api/serials/serial/\", data);\n  if (result.status === 200) {\n    return result.data;\n  } else if (result.status === 403) {\n    return {\n      error: \"Exist\"\n    };\n  } else {\n    return {\n      error: \"Can't set new shop for KSO\"\n    };\n  }\n}","map":{"version":3,"names":["requests","getAllSerials","sort","page","sortDirection","filter","filterField","data","sort_direction","Object","assign","filter_field","result","get","params","status","error","getSerial","serial_no","getShops","setSerialShopNo","serial_id","shopId","id","shop_id","post","changeSerialNo","serial_new","serial"],"sources":["/home/paycon-1/kso-lk-managment/reactapp/src/api.js"],"sourcesContent":["import requests from \"./requests\"\n\nexport async function getAllSerials({sort, page, sortDirection, filter, filterField}) {\n    let data = {\n        page: page,\n        sort: sort,\n        sort_direction: sortDirection\n    }\n    if (filter && filterField) {\n        data = Object.assign(data, {filter: filter, filter_field: filterField})\n    }\n    let result = await requests.get('api/serials/serials/', { params: data });\n    if (result.status === 200){\n        return result.data\n    } else {\n        return {error: \"Can't load serials data\"}\n    }\n}\n\nexport async function getSerial({serial_no}) {\n    let data = {'serial_no': serial_no}\n    let result = await requests.get('api/serials/serial/', { params:data });\n    if (result.status === 200){\n        return result.data\n    } else {\n        return {error: `Can't load serial: ${serial_no}`}\n    }\n}\n\nexport async function getShops() {\n    let data = {'page_size': 100000}\n    let result = await requests.get('api/serials/shops', { params:data })\n    if (result.status === 200){\n        return result.data\n    } else {\n        return {error: \"Can't load shops data\"}\n    }\n}\n\nexport async function setSerialShopNo({serial_id, shopId}) {\n    let data = {\n        id: serial_id,\n        shop_id: shopId\n    }\n    let result = await requests.post(\"api/serials/serial/\", data)\n    if (result.status === 200) {\n        return result.data\n    } else {\n        return {error: \"Can't set new shop for KSO\"}\n    }\n}\n\nexport async function changeSerialNo({serial_id, serial_new}){\n    let data = {\n        id:serial_id,\n        serial: serial_new\n    }\n    let result = await requests.post(\"api/serials/serial/\", data)\n    if (result.status === 200) {\n        return result.data\n    } else if (result.status === 403) {\n        return {error: \"Exist\"}\n    } else {\n        return {error: \"Can't set new shop for KSO\"}\n    }\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;AAEjC,OAAO,eAAeC,aAAaA,CAAC;EAACC,IAAI;EAAEC,IAAI;EAAEC,aAAa;EAAEC,MAAM;EAAEC;AAAW,CAAC,EAAE;EAClF,IAAIC,IAAI,GAAG;IACPJ,IAAI,EAAEA,IAAI;IACVD,IAAI,EAAEA,IAAI;IACVM,cAAc,EAAEJ;EACpB,CAAC;EACD,IAAIC,MAAM,IAAIC,WAAW,EAAE;IACvBC,IAAI,GAAGE,MAAM,CAACC,MAAM,CAACH,IAAI,EAAE;MAACF,MAAM,EAAEA,MAAM;MAAEM,YAAY,EAAEL;IAAW,CAAC,CAAC;EAC3E;EACA,IAAIM,MAAM,GAAG,MAAMZ,QAAQ,CAACa,GAAG,CAAC,sBAAsB,EAAE;IAAEC,MAAM,EAAEP;EAAK,CAAC,CAAC;EACzE,IAAIK,MAAM,CAACG,MAAM,KAAK,GAAG,EAAC;IACtB,OAAOH,MAAM,CAACL,IAAI;EACtB,CAAC,MAAM;IACH,OAAO;MAACS,KAAK,EAAE;IAAyB,CAAC;EAC7C;AACJ;AAEA,OAAO,eAAeC,SAASA,CAAC;EAACC;AAAS,CAAC,EAAE;EACzC,IAAIX,IAAI,GAAG;IAAC,WAAW,EAAEW;EAAS,CAAC;EACnC,IAAIN,MAAM,GAAG,MAAMZ,QAAQ,CAACa,GAAG,CAAC,qBAAqB,EAAE;IAAEC,MAAM,EAACP;EAAK,CAAC,CAAC;EACvE,IAAIK,MAAM,CAACG,MAAM,KAAK,GAAG,EAAC;IACtB,OAAOH,MAAM,CAACL,IAAI;EACtB,CAAC,MAAM;IACH,OAAO;MAACS,KAAK,EAAG,sBAAqBE,SAAU;IAAC,CAAC;EACrD;AACJ;AAEA,OAAO,eAAeC,QAAQA,CAAA,EAAG;EAC7B,IAAIZ,IAAI,GAAG;IAAC,WAAW,EAAE;EAAM,CAAC;EAChC,IAAIK,MAAM,GAAG,MAAMZ,QAAQ,CAACa,GAAG,CAAC,mBAAmB,EAAE;IAAEC,MAAM,EAACP;EAAK,CAAC,CAAC;EACrE,IAAIK,MAAM,CAACG,MAAM,KAAK,GAAG,EAAC;IACtB,OAAOH,MAAM,CAACL,IAAI;EACtB,CAAC,MAAM;IACH,OAAO;MAACS,KAAK,EAAE;IAAuB,CAAC;EAC3C;AACJ;AAEA,OAAO,eAAeI,eAAeA,CAAC;EAACC,SAAS;EAAEC;AAAM,CAAC,EAAE;EACvD,IAAIf,IAAI,GAAG;IACPgB,EAAE,EAAEF,SAAS;IACbG,OAAO,EAAEF;EACb,CAAC;EACD,IAAIV,MAAM,GAAG,MAAMZ,QAAQ,CAACyB,IAAI,CAAC,qBAAqB,EAAElB,IAAI,CAAC;EAC7D,IAAIK,MAAM,CAACG,MAAM,KAAK,GAAG,EAAE;IACvB,OAAOH,MAAM,CAACL,IAAI;EACtB,CAAC,MAAM;IACH,OAAO;MAACS,KAAK,EAAE;IAA4B,CAAC;EAChD;AACJ;AAEA,OAAO,eAAeU,cAAcA,CAAC;EAACL,SAAS;EAAEM;AAAU,CAAC,EAAC;EACzD,IAAIpB,IAAI,GAAG;IACPgB,EAAE,EAACF,SAAS;IACZO,MAAM,EAAED;EACZ,CAAC;EACD,IAAIf,MAAM,GAAG,MAAMZ,QAAQ,CAACyB,IAAI,CAAC,qBAAqB,EAAElB,IAAI,CAAC;EAC7D,IAAIK,MAAM,CAACG,MAAM,KAAK,GAAG,EAAE;IACvB,OAAOH,MAAM,CAACL,IAAI;EACtB,CAAC,MAAM,IAAIK,MAAM,CAACG,MAAM,KAAK,GAAG,EAAE;IAC9B,OAAO;MAACC,KAAK,EAAE;IAAO,CAAC;EAC3B,CAAC,MAAM;IACH,OAAO;MAACA,KAAK,EAAE;IAA4B,CAAC;EAChD;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}